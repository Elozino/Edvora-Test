
Nearest ride: A nearest ride is a ride that includes your station code or a number 
closest to your station code in the station_path array.For example, your station code is 40. 
So any ride that has your station code as nearest number in station_path array.

That would be  id 002 the most nearest as it has your station code 40 in the station_path array. 
Then id 003 has 41 from station_path array is nearest to your station code 40. 

Then id 001 has 42 from station_path array nearest to your station code 40. Hence it would be 002 > 003 > 001.
Please note: You cannot use the same ride twice
Distance : Nearest station for your ride is your station code. 
Example:For id 002, your station code is 40 and your ride also stops at your station so the distance is 40-40 = 0
for id 001, your station code is 40 and your ride stops at station 42, so the distance is 42-40 = 2



Upcoming ride: It shows all rides which has date in future. 
Past ride: It shows all rides which has date in past. Filters
Every ride has state and city. You need to get state and city from every ride object and create a list of state & city for the filters dropdown. 
State : It shows rides from that state only. City: It shows rides from selected city only. 
If a state is already selected then the city dropdown will have cities from selected state only. 


NOTE: 
when you select any state/city or state & city make sure the ride is nearest in that state/city or state & city. 

  // const nearRide = data.map((item) => item.station_path);
    
    // const closestRide = nearRide.filter(item => item.includes(value) || item.includes(value + 5));
    // console.log(closestRide);
    // const flatRide = nearRide.flat();
    // const sample = flatRide.filter(
    //   (item) => item >= value && item <= value + 10
    // );
    // .sort((a, b) => a - b);
    // const sortedNearRide = nearRide.sort((a, b) => a - b);
    // const filter = nearRide.filter((item) => item);
    // const filterHigh = nearRide.map((item) =>
    //   item.filter((item) => item > value && item < value + 10)
    // );

    // console.log(nearRide);
    // console.log(sortedNearRide);
    // console.log(filter);
    // console.log(filterHigh);
    // console.log(sample);
    // return sample;


  function filterNearsestRide(value) {
    const ride1 = value + 1;
    const ride2 = value + 2;
    const ride3 = value + 3;
    const nearestRideArray = [];

    // Conditions
    const nearRide = data.filter((item) => item.station_path.includes(value));
    const nearRide1 = data.filter((item) => item.station_path.includes(ride1));
    const nearRide2 = data.filter((item) => item.station_path.includes(ride2));
    const nearRide3 = data.filter((item) => item.station_path.includes(ride3));
    if (nearRide) {
      nearestRideArray.push(nearRide);
      console.log(nearestRideArray.flat());
    } else if (nearRide1) {
      nearestRideArray.push(...nearestRideArray, nearRide1);
      // setData(nearestRideArray.flat());
      console.log(nearestRideArray.flat());
    } else if (nearRide2) {
      nearestRideArray.push(...nearestRideArray, nearRide2);
      // setData(nearestRideArray.flat());
      console.log(nearestRideArray);
    } else if (nearRide3) {
      nearestRideArray.push(...nearestRideArray, nearRide3);
      // setData(nearestRideArray.flat())
      console.log(nearestRideArray.flat());
    } else {
      return data;
    }
  }


      const nearRide = data.filter(
      (item) =>
        item.origin_station_code == value ||
        item.origin_station_code > value + 3 ||
        item.origin_station_code < value - 3
    );
    console.log(nearRide);

        const nearRide = closestRide.sort(
      (a, b) => a.origin_station_code + b.origin_station_code
    );